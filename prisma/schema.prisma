// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String      @id @default(uuid())
  firstName               String
  lastName                String?
  email                   String      @unique
  password                String
  gender                  UserGender  @default(MALE)
  coverImage              String?
  profileImage            String?
  role                    UserRole    @default(USER)
  status                  UserStatus  @default(ACTIVE)
  lastSeen                DateTime    @default(now())
  isEmailVerified         Boolean     @default(false)
  createdAt               DateTime    @default(now())
  updatedAt               DateTime    @updatedAt
  friendsOf               User[]      @relation("_UsersFriends", references: [id])
  myFriends               User[]      @relation("_UsersFriends", references: [id])
  friendsRequestsSent     User[]      @relation("_FriendsRequests", references: [id])
  friendsRequestsReceived User[]      @relation("_FriendsRequests", references: [id])
  taggedInPosts           Post[]      @relation("_UsersPostsTag")
  specificAudienceInPosts Post[]      @relation("_UsersPostsSpecificAudience")
  posts                   Post[]
  likePosts               Post[]      @relation("_UsersPostsLike")
  membersInGroups         Group[]     @relation("_GroupMembers")
  groupsCreated           Group[]
  groupPost               GroupPost[] @relation("_GroupPostsCreated")
  groupPostLikes          GroupPost[] @relation("_UsersGroupPostsLikes")
}

model Post {
  id                      String           @id @default(uuid())
  content                 String?
  audience                PostAudienceEnum @default(PUBLIC)
  author                  User             @relation(fields: [authorId], references: [id])
  authorId                String
  image                   String?
  feeling                 String?
  checkIn                 String?
  taggedFriends           User[]           @relation("_UsersPostsTag")
  specificAudienceFriends User[]           @relation("_UsersPostsSpecificAudience")
  likes                   User[]           @relation("_UsersPostsLike")
  createdAt               DateTime         @default(now())
  updatedAt               DateTime         @updatedAt

}

model Group {
  id           String       @id @default(uuid())
  name         String
  privacy      GroupPrivacy @default(PUBLIC)
  members      User[]       @relation("_GroupMembers")
  admin        User         @relation(references: [id], fields: [adminId])
  adminId      String
  coverImage   String?
  profileImage String?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt


}

model GroupPost {
  id          String  @id @default(uuid())
  content     String?
  author      User    @relation(name: "_GroupPostsCreated", fields: [authorId], references: [id])
  authorId    String
  image       String?
  likes       User[]  @relation("_UsersGroupPostsLikes")
  isPublished Boolean @default(false)
}

enum PostAudienceEnum {
  PUBLIC
  FRIENDS
  ONLY_ME
  SPECIFIC
}

enum UserRole {
  ADMIN
  USER
}

enum UserGender {
  MALE
  FEMALE
  OTHER
}

enum UserStatus {
  ACTIVE
  IDLE
  LOGOUT
}

enum GroupPrivacy {
  PUBLIC
  PRIVATE
}
